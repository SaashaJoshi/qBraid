[tox]
minversion = 4.2.0
envlist =
    unit-tests
    docs
    linters
    format-check
skip_missing_interpreter = true

[testenv]
basepython = python3

[testenv:unit-tests]
description = Run pytests for main package and generate coverage report.
commands_pre = python -m pip install .
deps = -r{toxinidir}/requirements-dev.txt
pass_env =
    AWS_ACCESS_KEY_ID
    AWS_SECRET_ACCESS_KEY
    AZURE_TENANT_ID
    AZURE_CLIENT_ID
    AZURE_CLIENT_SECRET
    AZURE_QUANTUM_SUBSCRIPTION_ID
    AZURE_QUANTUM_WORKSPACE_RG
    AZURE_QUANTUM_WORKSPACE_NAME
    AZURE_QUANTUM_CONNECTION_STRING
    OQC_AUTH_TOKEN
    IONQ_API_KEY
    QISKIT_IBM_TOKEN
    QBRAID_API_KEY
    QBRAID_RUN_REMOTE_TESTS
commands =
    python3 -c "import qbraid; qbraid.about()"
    pytest tests \
        --ignore=tests/transpiler/bloqade \
        --ignore=tests/runtime/test_device_quera.py \
        --ignore=tests/runtime/native/test_quera_aquila_runtime.py \
        --ignore=tests/runtime/native/test_quera_simulation_result.py \
        --ignore=tests/vizualization/test_flair_animations.py \
        --cov=qbraid \
        --cov-config=pyproject.toml \
        --cov-report=xml:{toxworkdir}/coverage-main.xml \
        {posargs}

[testenv:quera-tests]
description = Run pytests for QuEra (bloqade) intergration and generate coverage report.
commands_pre = python -m pip install .
deps = -r{toxinidir}/requirements-quera.txt
pass_env =
    AWS_ACCESS_KEY_ID
    AWS_SECRET_ACCESS_KEY
    QBRAID_API_KEY
    QBRAID_RUN_REMOTE_TESTS
commands =
    python3 -c "import qbraid; qbraid.about()"
    pytest \
        tests/transpiler/bloqade \
        tests/runtime/test_device_quera.py \
        tests/runtime/native/test_quera_aquila_runtime.py \
        tests/runtime/native/test_quera_simulation_result.py \
        tests/vizualization/test_flair_animations.py \
        --cov=qbraid \
        --cov-config=pyproject.toml \
        --cov-report=term \
        --cov-report=xml:{toxworkdir}/coverage-quera.xml \
        {posargs}

[testenv:coverage-combine]
description = Combine coverage reports and generate a unified report
deps = coverage
skip_install = true
commands =
    coverage combine {toxworkdir}/coverage-main.xml {toxworkdir}/coverage-quera.xml
    coverage xml -o {toxinidir}/build/coverage//coverage.xml
    coverage report

[testenv:docs]
description = Use sphinx to build the HTML docs.
commands_pre = python -m pip install .
deps = -r{toxinidir}/requirements-dev.txt
extras =
    docs
commands =
    sphinx-build -W -b html docs/ docs/build/html {posargs}

[testenv:isort]
envdir = .tox/linters
skip_install = true
deps = isort
commands =
    isort . {posargs} qbraid bin tests

[testenv:pylint]
envdir = .tox/linters
skip_install = true
deps = pylint
commands =
    pylint {posargs} qbraid bin tests

[testenv:black]
envdir = .tox/linters
skip_install = true
deps = black
commands =
    black qbraid bin tests {posargs}

[testenv:mypy]
envdir = .tox/linters
skip_install = true
deps = mypy
commands =
    mypy qbraid tests bin {posargs}

[testenv:ruff]
envdir = .tox/linters
skip_install = true
deps = ruff
commands =
    ruff check qbraid tests bin {posargs}

[testenv:headers]
envdir = .tox/linters
skip_install = true
deps = qbraid-cli>=0.10.0
commands =
    qbraid admin headers tests bin qbraid --type=gpl --project "the qBraid-SDK" {posargs}

[testenv:linters]
allowlist_externals = qbraid
envdir = .tox/linters
skip_install = true
deps =
    {[testenv:isort]deps}
    {[testenv:black]deps}
    {[testenv:headers]deps}
commands =
    {[testenv:isort]commands}
    {[testenv:black]commands}
    {[testenv:headers]commands} {posargs:--fix}

[testenv:format-check]
allowlist_externals = qbraid
envdir = .tox/linters
skip_install = true
deps =
    {[testenv:pylint]deps}
    {[testenv:isort]deps}
    {[testenv:black]deps}
    {[testenv:ruff]deps}
    {[testenv:headers]deps}
commands =
    {[testenv:pylint]commands}
    {[testenv:isort]commands} {posargs:--check-only}
    {[testenv:black]commands} {posargs:--check}
    {[testenv:ruff]commands}
    {[testenv:headers]commands}
